---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import ProductCard from '../../components/ProductCard.astro';
import { productsService } from '../../utils/api/products';
import type { Product } from '../../types/types';

// Get product ID from URL
const { id } = Astro.params;

let product: Product | null = null;
let relatedProducts: Product[] = [];

try {
  // Fetch product details using the correct method
  product = await productsService.getProductById(id!);

  // Fetch related products (same category)
  if (product && product.category?.id) {
    const relatedResponse = await productsService.getProducts({
      category: product.category.id,
      limit: 4,
      page: 1
    });
    
    relatedProducts = relatedResponse.products
      ?.filter(p => p.id !== product!.id)
      ?.slice(0, 4) || [];
  }
} catch (error) {
  console.error('Error fetching product:', error);
}

if (!product) {
  return Astro.redirect('/productos');
}
---

<Layout 
  title={`${product.name} - StyleHub`}
  description={product.description}
  image={product.images?.find(img => img.is_primary)?.image_url || product.images?.[0]?.image_url}
>
  <Header />
  
  <main class="min-h-screen bg-white">
    <!-- Breadcrumb -->
    <div class="bg-gray-50 border-b border-gray-200">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
        <nav class="flex" aria-label="Breadcrumb">
          <ol class="flex items-center space-x-2 text-sm">
            <li>
              <a href="/" class="text-gray-500 hover:text-black font-medium tracking-wide uppercase">Inicio</a>
            </li>
            <li>
              <svg class="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </li>
            <li>
              <a href="/productos" class="text-gray-500 hover:text-black font-medium tracking-wide uppercase">Productos</a>
            </li>
            <li>
              <svg class="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </li>
            <li>
              <a href={`/productos?categoria=${product.category?.id || ''}`} class="text-gray-500 hover:text-black font-medium tracking-wide uppercase">
                {product.category?.name || 'Sin categoría'}
              </a>
            </li>
            <li>
              <svg class="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </li>
            <li>
              <span class="text-black font-bold tracking-wide uppercase">{product.name}</span>
            </li>
          </ol>
        </nav>
      </div>
    </div>

    <!-- Product Details -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="lg:grid lg:grid-cols-2 lg:gap-12 lg:items-start">
        <!-- Product Images -->
        <div class="mb-8 lg:mb-0">
          <div class="aspect-w-1 aspect-h-1 w-full">
            <img
              src={product.images?.find(img => img.is_primary)?.image_url || product.images?.[0]?.image_url || '/images/placeholder-product.jpg'}
              alt={product.name}
              class="w-full h-[600px] object-cover object-center rounded-lg shadow-sm"
            />
          </div>
          
          <!-- Thumbnail gallery (you can expand this later) -->
          <div class="mt-4 grid grid-cols-4 gap-2">
            {product.images && product.images.slice(0, 4).map((image, i) => (
              <div class="aspect-w-1 aspect-h-1">
                <img
                  src={image.image_url || '/images/placeholder-product.jpg'}
                  alt={`${product.name} - Vista ${i + 1}`}
                  class="w-full h-24 object-cover object-center rounded border hover:border-primary-500 cursor-pointer transition-colors"
                />
              </div>
            ))}
          </div>
        </div>

        <!-- Product Info -->
        <div class="lg:pl-8">
          <!-- Product header -->
          <div class="mb-6">
            <h1 class="text-3xl font-bold text-black mb-2 tracking-wide uppercase">{product.name}</h1>
            <p class="text-lg text-gray-600 mb-4 font-medium tracking-wide uppercase">{product.category?.name || 'Sin categoría'}</p>
            
            <!-- Rating and reviews -->
            <div class="flex items-center space-x-4 mb-4">
              <div class="flex items-center space-x-1">
                {[1, 2, 3, 4, 5].map(star => (
                  <svg class="h-5 w-5 text-yellow-400 fill-current" viewBox="0 0 20 20">
                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                  </svg>
                ))}
                <span class="text-sm text-gray-600 ml-2 font-medium">(4.5) • 127 reseñas</span>
              </div>
            </div>

            <!-- Price -->
            <div class="mb-6">
              <div class="flex items-center space-x-4">
                <span class="text-3xl font-bold text-black">${product.price.toFixed(2)}</span>
                <!-- <span class="text-xl text-gray-500 line-through">$129.99</span>
                <span class="bg-red-600 text-white text-sm font-bold px-2 py-1 rounded tracking-wide uppercase">25% OFF</span> -->
              </div>
            </div>

            <!-- Stock status -->
            <div class="mb-6">
              {product.stock_quantity > 0 ? (
                <div class="flex items-center space-x-2">
                  <svg class="h-5 w-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                  <span class="text-green-600 font-bold tracking-wide uppercase">
                    En stock ({product.stock_quantity} disponibles)
                  </span>
                </div>
              ) : (
                <div class="flex items-center space-x-2">
                  <svg class="h-5 w-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                  <span class="text-red-600 font-bold tracking-wide uppercase">Agotado</span>
                </div>
              )}
            </div>
          </div>

          <!-- Product options -->
          <div class="space-y-6 mb-8">
            <!-- Size selection -->
            {product.variants && product.variants.filter(v => v.size).length > 0 && (
              <div>
                <h3 class="text-sm font-bold text-black mb-3 tracking-wide uppercase">Talla</h3>
                <div class="grid grid-cols-4 gap-2">
                  {product.variants.filter(v => v.size).map(variant => (
                    <button class="size-option border border-black rounded-md py-2 px-3 text-sm font-bold text-black hover:bg-black hover:text-white focus:outline-none focus:ring-2 focus:ring-black transition-colors tracking-wide uppercase" data-size={variant.size}>
                      {variant.size}
                    </button>
                  ))}
                </div>
                <p class="mt-2 text-sm text-gray-600 font-medium">
                  <a href="/guia-tallas" class="text-black hover:text-gray-600 font-bold tracking-wide uppercase">Guía de tallas</a>
                </p>
              </div>
            )}

            <!-- Color selection -->
            {product.variants && product.variants.filter(v => v.color).length > 0 && (
              <div>
                <h3 class="text-sm font-bold text-black mb-3 tracking-wide uppercase">Color</h3>
                <div class="flex space-x-3">
                  {product.variants.filter(v => v.color).map(variant => (
                    <button 
                      class="color-option w-8 h-8 rounded-full border-2 border-black hover:ring-2 hover:ring-black focus:outline-none focus:ring-2 focus:ring-black transition-all"
                      style={`background-color: ${variant.color?.toLowerCase()}`}
                      title={variant.color}
                      data-color={variant.color}
                    >
                      <span class="sr-only">{variant.color}</span>
                    </button>
                  ))}
                </div>
              </div>
            )}

            <!-- Quantity -->
            <div>
              <h3 class="text-sm font-bold text-black mb-3 tracking-wide uppercase">Cantidad</h3>
              <div class="flex items-center space-x-3">
                <button class="quantity-decrease w-10 h-10 border border-black rounded-md flex items-center justify-center hover:bg-black hover:text-white focus:outline-none focus:ring-2 focus:ring-black transition-colors">
                  <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                  </svg>
                </button>
                <input 
                  type="number" 
                  min="1" 
                  max={product.stock_quantity}
                  value="1"
                  id="quantity-input"
                  class="w-16 text-center border border-black rounded-md py-2 focus:outline-none focus:ring-2 focus:ring-black focus:border-transparent font-bold"
                />
                <button class="quantity-increase w-10 h-10 border border-black rounded-md flex items-center justify-center hover:bg-black hover:text-white focus:outline-none focus:ring-2 focus:ring-black transition-colors">
                  <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>

          <!-- Action buttons -->
          <div class="space-y-4 mb-8">
            <button 
              id="add-to-cart-btn"
              class="w-full bg-black text-white py-3 px-8 rounded-lg font-bold text-lg hover:bg-gray-800 transition-colors disabled:bg-gray-300 disabled:cursor-not-allowed tracking-wide uppercase border border-black"
              disabled={product.stock_quantity === 0}
              data-product-id={product.id}
            >
              {product.stock_quantity === 0 ? 'Agotado' : 'Agregar al carrito'}
            </button>
            
            <button 
              id="buy-now-btn"
              class="w-full bg-white text-black py-3 px-8 rounded-lg font-bold text-lg hover:bg-gray-100 transition-colors disabled:bg-gray-300 disabled:cursor-not-allowed tracking-wide uppercase border border-black"
              disabled={product.stock_quantity === 0}
              data-product-id={product.id}
            >
              {product.stock_quantity === 0 ? 'Agotado' : 'Comprar ahora'}
            </button>
            
         
          </div>

          <!-- Product details -->
          <div class="border-t border-neutral-200 pt-8">
            <h3 class="text-lg font-semibold text-neutral-900 mb-4">Detalles del producto</h3>
            <div class="prose prose-sm text-neutral-600">
              <p>{product.description}</p>
            </div>
            
            <div class="mt-6 space-y-3">
              <div class="flex justify-between">
                <span class="text-sm text-neutral-500">SKU:</span>
                <span class="text-sm font-medium text-neutral-900">{product.sku}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-sm text-neutral-500">Categoría:</span>
                <span class="text-sm font-medium text-neutral-900">{product.category?.name || 'Sin categoría'}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-sm text-neutral-500">SKU:</span>
                <span class="text-sm font-medium text-neutral-900">{product.sku || 'N/A'}</span>
              </div>
            </div>
          </div>

          <!-- Shipping info -->
          <div class="border-t border-neutral-200 pt-8 mt-8">
            <h3 class="text-lg font-semibold text-neutral-900 mb-4">Envío y devoluciones</h3>
            <div class="space-y-3 text-sm text-neutral-600">
              <div class="flex items-center space-x-2">
                <svg class="h-5 w-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                <span>Envío gratis en compras mayores a $100</span>
              </div>
              <div class="flex items-center space-x-2">
                <svg class="h-5 w-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                <span>Devoluciones gratuitas durante 30 días</span>
              </div>
              <div class="flex items-center space-x-2">
                <svg class="h-5 w-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                <span>Entrega en 2-3 días hábiles</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Related Products -->
    {relatedProducts.length > 0 && (
      <section class="bg-neutral-50 py-16">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <h2 class="text-2xl font-bold text-neutral-900 mb-8 text-center">
            Productos relacionados
          </h2>
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
            {relatedProducts.map(relatedProduct => (
              <ProductCard product={relatedProduct} />
            ))}
          </div>
        </div>
      </section>
    )}
  </main>

  <Footer />
</Layout>

<script>
  import { authService, cartService } from '../../utils/api/index';

  document.addEventListener('DOMContentLoaded', function() {
    let selectedSize = '';
    let selectedColor = '';
    let selectedQuantity = 1;

    // Manejar selección de talla
    const sizeOptions = document.querySelectorAll('.size-option');
    sizeOptions.forEach(button => {
      button.addEventListener('click', function(this: HTMLElement) {
        // Remover selección anterior
        sizeOptions.forEach(btn => btn.classList.remove('border-primary-500', 'bg-primary-50'));
        // Agregar selección actual
        this.classList.add('border-primary-500', 'bg-primary-50');
        selectedSize = this.dataset.size || '';
      });
    });

    // Manejar selección de color
    const colorOptions = document.querySelectorAll('.color-option');
    colorOptions.forEach(button => {
      button.addEventListener('click', function(this: HTMLElement) {
        // Remover selección anterior
        colorOptions.forEach(btn => btn.classList.remove('ring-2', 'ring-primary-500'));
        // Agregar selección actual
        this.classList.add('ring-2', 'ring-primary-500');
        selectedColor = this.dataset.color || '';
      });
    });

    // Manejar cambio de cantidad
    const quantityInput = document.getElementById('quantity-input') as HTMLInputElement;
    const decreaseBtn = document.querySelector('.quantity-decrease') as HTMLButtonElement;
    const increaseBtn = document.querySelector('.quantity-increase') as HTMLButtonElement;

    if (quantityInput) {
      quantityInput.addEventListener('change', function() {
        selectedQuantity = parseInt(this.value) || 1;
      });
    }

    if (decreaseBtn) {
      decreaseBtn.addEventListener('click', function() {
        if (quantityInput && selectedQuantity > 1) {
          selectedQuantity--;
          quantityInput.value = selectedQuantity.toString();
        }
      });
    }

    if (increaseBtn) {
      increaseBtn.addEventListener('click', function() {
        const maxStock = parseInt(quantityInput?.getAttribute('max') || '1');
        if (quantityInput && selectedQuantity < maxStock) {
          selectedQuantity++;
          quantityInput.value = selectedQuantity.toString();
        }
      });
    }

    // Función para mostrar modal de login
    function showLoginModal() {
      const modal = document.createElement('div');
      modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
      modal.innerHTML = `
        <div class="bg-white rounded-lg p-6 max-w-md mx-4">
          <div class="flex items-center mb-4">
            <div class="w-12 h-12 bg-primary-100 rounded-full flex items-center justify-center mr-4">
              <svg class="w-6 h-6 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M8 11v2a4 4 0 008 0v-2M8 11h8" />
              </svg>
            </div>
            <div>
              <h3 class="text-lg font-semibold text-neutral-900">Inicia Sesión</h3>
              <p class="text-sm text-neutral-600">Necesitas una cuenta para realizar compras</p>
            </div>
          </div>
          <div class="flex space-x-3">
            <button onclick="window.location.href='/login'" class="flex-1 bg-primary-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-primary-700 transition-colors">
              Iniciar Sesión
            </button>
            <button onclick="this.closest('.fixed').remove()" class="flex-1 bg-neutral-200 text-neutral-700 px-4 py-2 rounded-lg font-medium hover:bg-neutral-300 transition-colors">
              Cancelar
            </button>
          </div>
          <div class="text-center mt-3">
            <span class="text-sm text-neutral-500">¿No tienes cuenta? </span>
            <a href="/registro" class="text-sm text-primary-600 hover:text-primary-700 font-medium">Regístrate aquí</a>
          </div>
        </div>
      `;
      
      document.body.appendChild(modal);
      
      // Cerrar modal al hacer click fuera
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          modal.remove();
        }
      });
    }

    // Función para mostrar toast
    function showToast(message: string, type: 'success' | 'error' = 'success') {
      const toast = document.createElement('div');
      toast.className = `fixed top-4 right-4 ${type === 'success' ? 'bg-green-500' : 'bg-red-500'} text-white px-4 py-2 rounded-lg shadow-lg z-50 transition-opacity duration-300`;
      toast.textContent = message;
      document.body.appendChild(toast);
      
      setTimeout(() => {
        toast.style.opacity = '0';
        setTimeout(() => toast.remove(), 300);
      }, 3000);
    }

    // Manejar botón "Agregar al carrito"
    const addToCartBtn = document.getElementById('add-to-cart-btn');
    if (addToCartBtn) {
      addToCartBtn.addEventListener('click', async function() {
        if (!authService.isAuthenticated()) {
          showLoginModal();
          return;
        }

        try {
          const productId = this.dataset.productId;
          
          await cartService.addToCart({
            product_id: productId!,
            quantity: selectedQuantity,
            variant_id: undefined // Puedes implementar lógica para seleccionar variante específica
          });

          // Actualizar contador del header si existe
          if (window.updateHeaderCartCount) {
            await window.updateHeaderCartCount();
          }

          showToast('Producto agregado al carrito');
        } catch (error) {
          console.error('Error adding to cart:', error);
          showToast('Error al agregar al carrito', 'error');
        }
      });
    }

    // Manejar botón "Comprar ahora"
    const buyNowBtn = document.getElementById('buy-now-btn');
    if (buyNowBtn) {
      buyNowBtn.addEventListener('click', async function() {
        if (!authService.isAuthenticated()) {
          showLoginModal();
          return;
        }

        try {
          const productId = this.dataset.productId;
          
          // Agregar al carrito
          await cartService.addToCart({
            product_id: productId!,
            quantity: selectedQuantity,
            variant_id: undefined
          });

          // Redirigir al carrito
          window.location.href = '/carrito';
        } catch (error) {
          console.error('Error with buy now:', error);
          showToast('Error al procesar la compra', 'error');
        }
      });
    }
  });

  // Declaraciones globales para TypeScript
  declare global {
    interface Window {
      updateHeaderCartCount: () => Promise<void>;
    }
  }
</script>

<style>
  .prose {
    max-width: none;
  }
  
  .aspect-w-1 {
    position: relative;
    padding-bottom: 100%;
  }
  
  .aspect-w-1 > * {
    position: absolute;
    height: 100%;
    width: 100%;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }
</style>
