---
interface Props {
  orderId?: string;
  amount?: number;
  showStripe?: boolean;
  showPayPal?: boolean;
  className?: string;
}

const { 
  orderId, 
  amount = 0, 
  showStripe = true, 
  showPayPal = true, 
  className = '' 
} = Astro.props;
---

<div class={`payment-buttons ${className}`} data-order-id={orderId} data-amount={amount}>
  {showStripe && (
    <div class="payment-method-stripe mb-4">
      <h3 class="text-lg font-medium text-gray-900 mb-3">Pagar con Tarjeta</h3>
      <div class="border rounded-lg p-4 bg-gray-50">
        <div id="stripe-card-element" class="p-3 border border-gray-300 rounded bg-white">
          <!-- Stripe Elements will create form elements here -->
        </div>
        <div id="stripe-card-errors" class="text-red-600 text-sm mt-2" role="alert"></div>
        <button id="stripe-pay-button" 
                class="w-full mt-4 bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
          <span class="stripe-button-text">Pagar ${amount.toFixed(2)}</span>
          <div class="stripe-button-spinner hidden">
            <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-white mx-auto"></div>
          </div>
        </button>
      </div>
    </div>
  )}

  {showPayPal && (
    <div class="payment-method-paypal">
      <h3 class="text-lg font-medium text-gray-900 mb-3">Pagar con PayPal</h3>
      <div class="border rounded-lg p-4 bg-gray-50">
        <div id="paypal-button-container" class="max-w-xs mx-auto">
          <!-- PayPal button will be rendered here -->
        </div>
      </div>
    </div>
  )}

  <!-- Loading Overlay -->
  <div id="payment-loading" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white p-6 rounded-lg">
      <div class="flex items-center space-x-3">
        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
        <span>Procesando pago...</span>
      </div>
    </div>
  </div>
</div>

<script>
  import { paymentsService } from '../utils/api/index';

  // Stripe variables
  let stripe: any = null;
  let stripeElements: any = null;
  let cardElement: any = null;

  // PayPal variables
  let paypalInitialized = false;

  class PaymentButtons {
    private orderId: string;
    private amount: number;
    private container: HTMLElement;

    constructor(container: HTMLElement) {
      this.container = container;
      this.orderId = container.getAttribute('data-order-id') || '';
      this.amount = parseFloat(container.getAttribute('data-amount') || '0');
      
      this.init();
    }

    async init() {
      if (this.container.querySelector('.payment-method-stripe')) {
        await this.initStripe();
      }
      
      if (this.container.querySelector('.payment-method-paypal')) {
        await this.initPayPal();
      }
    }

    async initStripe() {
      try {
        // Replace with your Stripe publishable key
        stripe = (window as any).Stripe('pk_test_your_publishable_key_here');
        
        stripeElements = stripe.elements();
        
        cardElement = stripeElements.create('card', {
          style: {
            base: {
              fontSize: '16px',
              color: '#424770',
              '::placeholder': {
                color: '#aab7c4',
              },
            },
          },
        });

        const cardElementContainer = this.container.querySelector('#stripe-card-element');
        if (cardElementContainer) {
          cardElement.mount('#stripe-card-element');
        }

        cardElement.on('change', (event: any) => {
          const errorElement = this.container.querySelector('#stripe-card-errors');
          if (event.error) {
            if (errorElement) errorElement.textContent = event.error.message;
          } else {
            if (errorElement) errorElement.textContent = '';
          }
        });

        // Handle Stripe payment button
        const payButton = this.container.querySelector('#stripe-pay-button');
        payButton?.addEventListener('click', () => this.handleStripePayment());

      } catch (error) {
        console.error('Error initializing Stripe:', error);
      }
    }

    async initPayPal() {
      try {
        if ((window as any).paypal && !paypalInitialized) {
          const container = this.container.querySelector('#paypal-button-container');
          if (container) {
            (window as any).paypal.Buttons({
              createOrder: (data: any, actions: any) => {
                return actions.order.create({
                  purchase_units: [{
                    amount: {
                      value: this.amount.toString()
                    }
                  }]
                });
              },
              onApprove: async (data: any, actions: any) => {
                try {
                  await this.handlePayPalPayment(data.orderID);
                } catch (error) {
                  console.error('PayPal payment error:', error);
                  alert('Error procesando pago con PayPal');
                }
              },
              onError: (err: any) => {
                console.error('PayPal error:', err);
                alert('Error con PayPal');
              }
            }).render('#paypal-button-container');
            
            paypalInitialized = true;
          }
        }
      } catch (error) {
        console.error('Error initializing PayPal:', error);
      }
    }

    async handleStripePayment() {
      if (!this.orderId) {
        alert('ID de orden requerido');
        return;
      }

      try {
        this.showLoading(true);
        this.setStripeButtonLoading(true);

        // Create payment intent
        const paymentIntent = await paymentsService.createPaymentIntent(this.orderId);
        
        // Confirm payment with Stripe
        const { error, paymentIntent: confirmedPayment } = await stripe.confirmCardPayment(
          paymentIntent.client_secret,
          {
            payment_method: {
              card: cardElement,
            }
          }
        );

        if (error) {
          throw new Error(error.message);
        }

        // Confirm payment on backend
        await paymentsService.confirmStripePayment(confirmedPayment.id, this.orderId);
        
        // Trigger success event
        this.container.dispatchEvent(new CustomEvent('paymentSuccess', {
          detail: { 
            method: 'stripe', 
            paymentIntent: confirmedPayment,
            orderId: this.orderId
          }
        }));
        
      } catch (error: any) {
        console.error('Stripe payment error:', error);
        alert(error.message || 'Error procesando pago');
        
        this.container.dispatchEvent(new CustomEvent('paymentError', {
          detail: { method: 'stripe', error: error.message }
        }));
      } finally {
        this.showLoading(false);
        this.setStripeButtonLoading(false);
      }
    }

    async handlePayPalPayment(paypalOrderId: string) {
      if (!this.orderId) {
        alert('ID de orden requerido');
        return;
      }

      try {
        this.showLoading(true);
        
        await paymentsService.processPayPalPayment(this.orderId, paypalOrderId);
        
        // Trigger success event
        this.container.dispatchEvent(new CustomEvent('paymentSuccess', {
          detail: { 
            method: 'paypal', 
            paypalOrderId,
            orderId: this.orderId
          }
        }));
        
      } catch (error: any) {
        console.error('PayPal payment error:', error);
        alert(error.message || 'Error procesando pago con PayPal');
        
        this.container.dispatchEvent(new CustomEvent('paymentError', {
          detail: { method: 'paypal', error: error.message }
        }));
      } finally {
        this.showLoading(false);
      }
    }

    setStripeButtonLoading(loading: boolean) {
      const button = this.container.querySelector('#stripe-pay-button') as HTMLButtonElement;
      const text = this.container.querySelector('.stripe-button-text');
      const spinner = this.container.querySelector('.stripe-button-spinner');
      
      if (button && text && spinner) {
        button.disabled = loading;
        text.classList.toggle('hidden', loading);
        spinner.classList.toggle('hidden', !loading);
      }
    }

    showLoading(show: boolean) {
      const overlay = this.container.querySelector('#payment-loading');
      if (overlay) {
        overlay.classList.toggle('hidden', !show);
      }
    }

    updateOrderId(newOrderId: string) {
      this.orderId = newOrderId;
      this.container.setAttribute('data-order-id', newOrderId);
    }

    updateAmount(newAmount: number) {
      this.amount = newAmount;
      this.container.setAttribute('data-amount', newAmount.toString());
      
      // Update button text
      const buttonText = this.container.querySelector('.stripe-button-text');
      if (buttonText) {
        buttonText.textContent = `Pagar $${newAmount.toFixed(2)}`;
      }
    }
  }

  // Initialize payment buttons when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    const paymentContainers = document.querySelectorAll('.payment-buttons');
    paymentContainers.forEach(container => {
      new PaymentButtons(container as HTMLElement);
    });
  });

  // Export for use in other scripts
  (window as any).PaymentButtons = PaymentButtons;
</script>

<!-- Stripe JavaScript -->
<script src="https://js.stripe.com/v3/"></script>

<!-- PayPal JavaScript - Loaded dynamically with environment config -->
<script>
  // PayPal script will be loaded dynamically by checkout.ts using ENV.PAYPAL.getSDKUrl()
  console.log('PayPal SDK will be loaded dynamically by checkout functionality');
</script>
