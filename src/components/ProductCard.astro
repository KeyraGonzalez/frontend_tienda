---
import type { Product } from '../types/types';

export interface Props {
  product: Product;
  showQuickView?: boolean;
}

const { product, showQuickView = true } = Astro.props;
---

<div class="group relative bg-white rounded-2xl shadow-md border border-gray-200 hover:shadow-2xl hover:border-gray-300 transition-all duration-500 overflow-hidden transform hover:-translate-y-1">
  <!-- Product Image -->
  <div class="aspect-w-1 aspect-h-1 w-full overflow-hidden bg-gradient-to-br from-gray-50 to-gray-100 relative">
    <img
      src={product.images?.find(img => img.is_primary)?.image_url || product.images?.[0]?.image_url || product.image_url || '/placeholder.jpg'}
      alt={product.name}
      class="product-image h-64 w-full object-cover object-center group-hover:scale-105 transition-transform duration-700 ease-out"
      loading="lazy"
      onerror="this.src='/placeholder.jpg'; console.error('Error cargando imagen ProductCard:', this.src);"
    />
    
    <!-- Product badges -->
    <div class="absolute top-3 left-3 flex flex-col space-y-2">
      {product.stock_quantity <= 5 && product.stock_quantity > 0 && (
        <span class="bg-gradient-to-r from-orange-500 to-red-500 text-white text-xs font-bold px-3 py-1 rounded-full tracking-wide uppercase shadow-lg">
          √öltimas unidades
        </span>
      )}
      {product.stock_quantity === 0 && (
        <span class="bg-gradient-to-r from-red-600 to-red-700 text-white text-xs font-bold px-3 py-1 rounded-full tracking-wide uppercase shadow-lg">
          Agotado
        </span>
      )}
      {product.featured && (
        <span class="bg-gradient-to-r from-yellow-500 to-yellow-600 text-white text-xs font-bold px-3 py-1 rounded-full tracking-wide uppercase shadow-lg">
          ‚≠ê Destacado
        </span>
      )}
    </div>

    <!-- Quick actions overlay -->
    <div class="absolute inset-x-0 bottom-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-all duration-300 flex items-end justify-center pb-4">
      <div class="flex space-x-2 transform translate-y-4 group-hover:translate-y-0 transition-transform duration-300">
        {showQuickView && (
          <button 
            class="bg-white text-black px-3 py-1.5 rounded-md text-xs font-bold hover:bg-gray-100 transition-all tracking-wide uppercase border border-black shadow-lg hover:shadow-xl transform hover:scale-105"
            onclick={`showQuickView('${product.id}')`}
          >
            Vista r√°pida
          </button>
        )}
        <a 
          href={`/productos/${product.id}`}
          class="bg-black text-white px-3 py-1.5 rounded-md text-xs font-bold hover:bg-gray-800 transition-all tracking-wide uppercase border border-black shadow-lg hover:shadow-xl transform hover:scale-105"
        >
          Ver detalles
        </a>
      </div>
    </div>

    <!-- Discount badge (if you add sales later) -->
    <!-- <div class="absolute bottom-3 left-3">
      <span class="bg-red-500 text-white text-sm font-bold px-2 py-1 rounded-lg">
        -20%
      </span>
    </div> -->
  </div>

  <!-- Product Info -->
  <div class="p-5">
    <!-- Brand/Category -->
    <div class="flex items-center justify-between mb-2">
      <p class="text-sm text-neutral-500 font-medium uppercase tracking-wide">
        {(product as any).categories?.name || product.category?.name || 'Producto'}
      </p>
      <!-- Stock indicator -->
      <div class="flex items-center space-x-1">
        <div class={`w-2 h-2 rounded-full ${product.stock_quantity > 10 ? 'bg-green-400' : product.stock_quantity > 0 ? 'bg-yellow-400' : 'bg-red-400'}`}></div>
        <span class="text-xs text-neutral-500">
          {product.stock_quantity > 10 ? 'En stock' : product.stock_quantity > 0 ? 'Poco stock' : 'Agotado'}
        </span>
      </div>
    </div>
    
    <!-- Product Name -->
    <h3 class="text-lg font-bold text-neutral-900 mb-3 line-clamp-2 group-hover:text-black transition-colors min-h-[3.5rem]">
      <a href={`/productos/${product.id}`} class="hover:underline">
        {product.name}
      </a>
    </h3>

    <!-- Price and Rating -->
    <div class="flex items-center justify-between mb-4">
      <div class="flex items-center space-x-2">
        <span class="text-2xl font-bold text-black">
          ${product.price.toFixed(2)}
        </span>
        <!-- You can add sale price logic here -->
        <!-- <span class="text-lg text-neutral-500 line-through">$99.99</span> -->
      </div>
      
      <!-- Rating -->
      <div class="flex items-center space-x-1">
        <div class="flex space-x-1">
          {[1, 2, 3, 4, 5].map(star => (
            <svg class="h-4 w-4 text-yellow-400 fill-current" viewBox="0 0 20 20">
              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
            </svg>
          ))}
        </div>
        <span class="text-sm text-neutral-500 font-medium">(4.5)</span>
      </div>
    </div>

    <!-- Available Colors -->
    {product.variants && product.variants.filter(v => v.color).length > 0 && (
      <div class="mb-3">
        <p class="text-xs text-neutral-500 mb-2 font-medium">üé® Colores disponibles:</p>
        <div class="flex space-x-2">
          {product.variants.filter(v => v.color).slice(0, 4).map(variant => (
            <div 
              class="w-7 h-7 rounded-full border-2 border-neutral-300 shadow-sm hover:shadow-md transition-shadow cursor-pointer hover:scale-110 transform transition-transform"
              style={`background-color: ${variant.color?.toLowerCase()}`}
              title={variant.color}
            ></div>
          ))}
          {product.variants.filter(v => v.color).length > 4 && (
            <div class="w-7 h-7 rounded-full bg-neutral-200 border-2 border-neutral-300 flex items-center justify-center hover:bg-neutral-300 transition-colors cursor-pointer">
              <span class="text-xs text-neutral-600 font-bold">+{product.variants.filter(v => v.color).length - 4}</span>
            </div>
          )}
        </div>
      </div>
    )}

    <!-- Available Sizes -->
    {product.variants && product.variants.filter(v => v.size).length > 0 && (
      <div class="mb-4">
        <p class="text-xs text-neutral-500 mb-2 font-medium">üìè Tallas disponibles:</p>
        <div class="flex space-x-2 flex-wrap gap-y-1">
          {product.variants.filter(v => v.size).slice(0, 5).map(variant => (
            <span class="px-3 py-1 bg-neutral-100 hover:bg-neutral-200 text-neutral-700 text-xs rounded-lg border hover:border-neutral-400 transition-all cursor-pointer font-medium">
              {variant.size}
            </span>
          ))}
          {product.variants.filter(v => v.size).length > 5 && (
            <span class="px-3 py-1 bg-neutral-100 text-neutral-700 text-xs rounded-lg border font-medium">
              +{product.variants.filter(v => v.size).length - 5} m√°s
            </span>
          )}
        </div>
      </div>
    )}

    <!-- Add to Cart Button -->
    <div class="space-y-2">
      <button 
        class={`w-full py-3 px-4 rounded-xl font-bold transition-all transform hover:scale-105 tracking-wide uppercase border-2 shadow-md hover:shadow-lg ${
          product.stock_quantity === 0 
            ? 'bg-neutral-300 text-neutral-500 cursor-not-allowed border-neutral-300' 
            : 'bg-black text-white hover:bg-gray-800 border-black hover:border-gray-800'
        }`}
        disabled={product.stock_quantity === 0}
        onclick={`addToCartFromCard('${product.id}', '${product.variants?.find(v => v.size)?.size || 'N/A'}', '${product.variants?.find(v => v.color)?.color || 'N/A'}')`}
      >
        {product.stock_quantity === 0 ? 'Agotado' : 'Agregar al carrito'}
      </button>
      
      <!-- Quick info row -->
      <div class="flex items-center justify-between text-xs text-neutral-500">
        <span class="flex items-center space-x-1">
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 8h14M5 8a2 2 0 110-4h1.586a1 1 0 01.707.293l1.414 1.414a1 1 0 00.707.293H20a2 2 0 110 4H5zm0 0v2a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4"></path>
          </svg>
          <span>Env√≠o gratis</span>
        </span>
        <span class="flex items-center space-x-1">
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <span>Garant√≠a 30 d√≠as</span>
        </span>
      </div>
    </div>
  </div>
</div>

<script>
  import { cartService, authService } from '../utils/api/index';

  // Funci√≥n global para mostrar vista r√°pida
  window.showQuickView = async function(productId: string) {
    // Aqu√≠ puedes implementar la vista r√°pida
    // Por ahora, redirigimos a la p√°gina del producto
    window.location.href = `/productos/${productId}`;
  };

  // Funci√≥n global para agregar al carrito desde ProductCard
  window.addToCartFromCard = async function(productId: string, size: string, color: string) {
    try {
      if (!authService.isAuthenticated()) {
        // Mostrar modal de login
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
        modal.innerHTML = `
          <div class="bg-white rounded-lg p-6 max-w-md mx-4">
            <div class="flex items-center mb-4">
              <div class="w-12 h-12 bg-black bg-opacity-10 rounded-full flex items-center justify-center mr-4">
                <svg class="w-6 h-6 text-black" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M8 11v2a4 4 0 008 0v-2M8 11h8" />
                </svg>
              </div>
              <div>
                <h3 class="text-lg font-bold text-black tracking-wide uppercase">Inicia Sesi√≥n</h3>
                <p class="text-sm text-gray-600 font-medium">Necesitas una cuenta para agregar productos al carrito</p>
              </div>
            </div>
            <div class="flex space-x-3">
              <button onclick="window.location.href='/login'" class="flex-1 bg-black text-white px-4 py-2 rounded-lg font-bold hover:bg-gray-800 transition-colors tracking-wide uppercase border border-black">
                Iniciar Sesi√≥n
              </button>
              <button onclick="this.closest('.fixed').remove()" class="flex-1 bg-white text-black px-4 py-2 rounded-lg font-bold hover:bg-gray-100 transition-colors tracking-wide uppercase border border-black">
                Cancelar
              </button>
            </div>
            <div class="text-center mt-3">
              <span class="text-sm text-gray-600 font-medium">¬øNo tienes cuenta? </span>
              <a href="/registro" class="text-sm text-black hover:text-gray-600 font-bold tracking-wide uppercase">Reg√≠strate aqu√≠</a>
            </div>
          </div>
        `;
        
        document.body.appendChild(modal);
        
        // Cerrar modal al hacer click fuera
        modal.addEventListener('click', (e) => {
          if (e.target === modal) {
            modal.remove();
          }
        });
        return;
      }

      // Agregar al carrito
      await cartService.addToCart({
        product_id: productId,
        quantity: 1,
        variant_id: undefined // Aqu√≠ podr√≠as seleccionar la variante espec√≠fica
      });

      // Actualizar contador del header
      if (window.updateHeaderCartCount) {
        await window.updateHeaderCartCount();
      }

      // Mostrar mensaje de √©xito
      const toast = document.createElement('div');
      toast.className = 'fixed top-4 right-4 bg-black text-white px-4 py-2 rounded-lg shadow-lg z-50 transition-opacity duration-300 font-bold tracking-wide uppercase border border-black';
      toast.textContent = 'Producto agregado al carrito';
      document.body.appendChild(toast);
      
      setTimeout(() => {
        toast.style.opacity = '0';
        setTimeout(() => toast.remove(), 300);
      }, 3000);

    } catch (error) {
      console.error('Error adding to cart:', error);
      
      // Mostrar mensaje de error
      const toast = document.createElement('div');
      toast.className = 'fixed top-4 right-4 bg-red-600 text-white px-4 py-2 rounded-lg shadow-lg z-50 transition-opacity duration-300 font-bold tracking-wide uppercase border border-red-600';
      toast.textContent = 'Error al agregar al carrito';
      document.body.appendChild(toast);
      
      setTimeout(() => {
        toast.style.opacity = '0';
        setTimeout(() => toast.remove(), 300);
      }, 3000);
    }
  };

  // Declarar las funciones en window
  declare global {
    interface Window {
      addToCartFromCard: (productId: string, size: string, color: string) => Promise<void>;
      showQuickView: (productId: string) => Promise<void>;
    }
  }
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .aspect-w-1 {
    position: relative;
    padding-bottom: 100%;
  }
  
  .aspect-w-1 > * {
    position: absolute;
    height: 100%;
    width: 100%;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }
</style>
