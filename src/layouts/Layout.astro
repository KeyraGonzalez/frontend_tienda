---
export interface Props {
  title: string;
  description?: string;
  image?: string;
  noIndex?: boolean;
}

const { 
  title, 
  description = "StyleHub - Tu tienda de moda online con Jonathan Marin. Encuentra las mejores marcas y estilos al mejor precio. Productos de calidad, envío rápido y atención personalizada.",
  image = "/images/og-stylehub.jpg",
  noIndex = false
} = Astro.props;

// Construir URL canónica de forma segura
let canonicalURL: URL;
try {
  canonicalURL = new URL(Astro.url.pathname, Astro.site || 'http://localhost:4321');
} catch (error) {
  // Fallback para desarrollo local
  canonicalURL = new URL(Astro.url.pathname, 'http://localhost:4321');
}
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="author" content="Jonathan Marin" />
    <meta name="keywords" content="tienda online, moda, StyleHub, productos, e-commerce, compras" />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Favicon y íconos -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="apple-touch-icon" sizes="180x180" href="/favicon.svg" />
    
    <!-- SEO Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    {noIndex && <meta name="robots" content="noindex, nofollow" />}
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content="StyleHub" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={image} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:locale" content="es_ES" />
    
    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@StyleHub" />
    <meta name="twitter:creator" content="@JonathanMarin" />
    <meta name="twitter:url" content={canonicalURL} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={image} />
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link 
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&display=swap" 
      rel="stylesheet" 
    />
    
    <!-- PWA & Manifest -->
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#3b82f6" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="StyleHub" />
    <meta name="application-name" content="StyleHub" />
    <meta name="msapplication-TileColor" content="#3b82f6" />
    
    <!-- Preload critical resources -->
    <link rel="preload" as="style" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" />
    
    <!-- Generator meta -->
    <meta name="generator" content={Astro.generator} />
  </head>
  <body class="bg-white text-neutral-900 font-sans antialiased">
    <slot />
    
    <!-- Scripts -->
    <script is:inline type="module">
      // Import services
      import { cartService, authService } from '../utils/api/index.js';
      
      // Make services available globally
      window.cartService = cartService;
      window.authService = authService;

      // Cart functionality with API integration
      class CartManager {
        constructor() {
          this.items = [];
          this.isLoading = false;
          this.isAuthenticated = false;
          this.initializeCart();
        }

        async initializeCart() {
          // Ensure items array is initialized
          if (!Array.isArray(this.items)) {
            this.items = [];
          }

          // Check if user is authenticated
          const token = localStorage.getItem('auth_token');
          this.isAuthenticated = !!token;

          // Always load from localStorage first for immediate UI feedback
          this.loadCartFromStorage();
          this.updateCartUI();

          // Then try to sync with API if authenticated
          if (this.isAuthenticated) {
            try {
              await this.loadCartFromAPI();
            } catch (error) {
              console.warn('Cart API sync failed, continuing with local data:', error.message);
            }
          }
          
          this.updateCartUI();
        }

        // Load cart from API
        async loadCartFromAPI() {
          if (!window.cartService) {
            console.warn('Cart service not available');
            return;
          }
          
          try {
            this.isLoading = true;
            const cartData = await window.cartService.getCart();
            
            // Validate API response
            if (cartData && Array.isArray(cartData.items)) {
              this.items = cartData.items.filter(item => {
                // Filter out invalid items from API
                return item && 
                       item.products && 
                       typeof item.products === 'object' &&
                       typeof item.quantity === 'number' &&
                       item.quantity > 0;
              });
            } else {
              this.items = [];
            }
            
            this.syncToStorage();
          } catch (error) {
            console.warn('API cart load error - using fallback:', error.message);
            // Don't throw error, just fallback to localStorage
            this.loadCartFromStorage();
          } finally {
            this.isLoading = false;
          }
        }

        // Load cart from localStorage (fallback)
        loadCartFromStorage() {
          try {
            const cart = localStorage.getItem('stylehub-cart');
            if (cart) {
              const parsedCart = JSON.parse(cart);
              // Validate that it's an array and contains valid items
              if (Array.isArray(parsedCart)) {
                this.items = parsedCart.filter(item => {
                  // Filter out invalid items
                  return item && 
                         item.product && 
                         typeof item.product === 'object' &&
                         typeof item.quantity === 'number' &&
                         item.quantity > 0;
                });
              } else {
                this.items = [];
              }
            } else {
              this.items = [];
            }
          } catch (error) {
            console.error('Error loading cart from storage:', error);
            this.items = [];
            // Clear corrupted data
            localStorage.removeItem('stylehub-cart');
          }
        }

        // Sync cart to localStorage
        syncToStorage() {
          localStorage.setItem('stylehub-cart', JSON.stringify(this.items));
        }

        // Save cart to API and localStorage
        async saveCart() {
          this.syncToStorage();
          
          if (this.isAuthenticated && window.cartService) {
            try {
              // API sync in background
              await this.loadCartFromAPI();
            } catch (error) {
              console.error('Background cart sync error:', error);
            }
          }
          
          this.updateCartUI();
        }

        // Add item with API integration
        async addItem(product, quantity = 1, size = null, color = null) {
          const existingItem = this.items.find(
            item => item.product.id === product.id && 
                    item.size === size && 
                    item.color === color
          );

          if (this.isAuthenticated && window.cartService) {
            try {
              this.isLoading = true;
              
              // Add to API first
              await window.cartService.addToCart({
                product_id: product.id.toString(),
                quantity: quantity,
                variant_id: size || color ? `${size || ''}-${color || ''}` : undefined
              });

              // Reload from API to get updated cart
              await this.loadCartFromAPI();
              
              if (window.showToast) {
                window.showToast('Producto agregado al carrito', 'success');
              }
            } catch (error) {
              console.error('Add to cart API error:', error);
              // Fallback to localStorage
              this.addItemLocally(product, quantity, size, color);
              if (window.showToast) {
                window.showToast('Producto agregado (modo offline)', 'info');
              }
            } finally {
              this.isLoading = false;
            }
          } else {
            this.addItemLocally(product, quantity, size, color);
            if (window.showToast) {
              window.showToast('Producto agregado al carrito', 'success');
            }
          }
        }

        // Add item locally (fallback)
        addItemLocally(product, quantity, size, color) {
          const existingItem = this.items.find(
            item => item.product.id === product.id && 
                    item.size === size && 
                    item.color === color
          );

          if (existingItem) {
            existingItem.quantity += quantity;
          } else {
            this.items.push({
              id: Date.now(),
              product,
              quantity,
              size,
              color
            });
          }
          
          this.saveCart();
        }

        // Remove item with API integration
        async removeItem(itemId) {
          if (this.isAuthenticated && window.cartService) {
            try {
              this.isLoading = true;
              
              // Remove from API
              await window.cartService.removeFromCart(itemId.toString());
              
              // Reload from API
              await this.loadCartFromAPI();
              
              if (window.showToast) {
                window.showToast('Producto eliminado del carrito', 'success');
              }
            } catch (error) {
              console.error('Remove from cart API error:', error);
              // Fallback to localStorage
              this.removeItemLocally(itemId);
              if (window.showToast) {
                window.showToast('Producto eliminado (modo offline)', 'info');
              }
            } finally {
              this.isLoading = false;
            }
          } else {
            this.removeItemLocally(itemId);
            if (window.showToast) {
              window.showToast('Producto eliminado del carrito', 'success');
            }
          }
        }

        // Remove item locally (fallback)
        removeItemLocally(itemId) {
          this.items = this.items.filter(item => item.id !== itemId);
          this.saveCart();
        }

        // Update quantity with API integration
        async updateQuantity(itemId, quantity) {
          if (quantity <= 0) {
            await this.removeItem(itemId);
            return;
          }

          if (this.isAuthenticated && window.cartService) {
            try {
              this.isLoading = true;
              
              // Update in API
              await window.cartService.updateCartItem(itemId.toString(), quantity);
              
              // Reload from API
              await this.loadCartFromAPI();
            } catch (error) {
              console.error('Update cart API error:', error);
              // Fallback to localStorage
              this.updateQuantityLocally(itemId, quantity);
            } finally {
              this.isLoading = false;
            }
          } else {
            this.updateQuantityLocally(itemId, quantity);
          }
        }

        // Update quantity locally (fallback)
        updateQuantityLocally(itemId, quantity) {
          const item = this.items.find(item => item.id === itemId);
          if (item && quantity > 0) {
            item.quantity = quantity;
            this.saveCart();
          }
        }

        // Clear cart with API integration
        async clear() {
          if (this.isAuthenticated && window.cartService) {
            try {
              this.isLoading = true;
              
              // Clear in API
              await window.cartService.clearCart();
              
              // Clear locally
              this.items = [];
              this.saveCart();
              
              if (window.showToast) {
                window.showToast('Carrito vaciado', 'success');
              }
            } catch (error) {
              console.error('Clear cart API error:', error);
              // Fallback to localStorage
              this.items = [];
              this.saveCart();
              if (window.showToast) {
                window.showToast('Carrito vaciado (modo offline)', 'info');
              }
            } finally {
              this.isLoading = false;
            }
          } else {
            this.items = [];
            this.saveCart();
            if (window.showToast) {
              window.showToast('Carrito vaciado', 'success');
            }
          }
        }

        // Apply coupon
        async applyCoupon(couponCode) {
          if (!this.isAuthenticated || !window.cartService) {
            if (window.showToast) {
              window.showToast('Inicia sesión para usar cupones', 'error');
            }
            return;
          }

          try {
            this.isLoading = true;
            const cartData = await window.cartService.applyCoupon(couponCode);
            this.items = cartData.items || [];
            this.syncToStorage();
            this.updateCartUI();
            
            if (window.showToast) {
              window.showToast('Cupón aplicado correctamente', 'success');
            }
          } catch (error) {
            console.error('Apply coupon error:', error);
            if (window.showToast) {
              window.showToast('Error al aplicar cupón', 'error');
            }
          } finally {
            this.isLoading = false;
          }
        }

        // Remove coupon
        async removeCoupon() {
          if (!this.isAuthenticated || !window.cartService) return;

          try {
            this.isLoading = true;
            const cartData = await window.cartService.removeCoupon();
            this.items = cartData.items || [];
            this.syncToStorage();
            this.updateCartUI();
            
            if (window.showToast) {
              window.showToast('Cupón removido', 'success');
            }
          } catch (error) {
            console.error('Remove coupon error:', error);
            if (window.showToast) {
              window.showToast('Error al remover cupón', 'error');
            }
          } finally {
            this.isLoading = false;
          }
        }

        // Get total
        getTotal() {
          return this.items.reduce((total, item) => {
            // Validate item structure
            if (!item || !item.product || typeof item.product.price !== 'number') {
              console.warn('Invalid item found in cart:', item);
              return total;
            }
            const price = parseFloat(item.product.price) || 0;
            const quantity = parseInt(item.quantity) || 0;
            return total + (price * quantity);
          }, 0);
        }

        // Get item count
        getItemCount() {
          return this.items.reduce((count, item) => {
            if (!item || typeof item.quantity !== 'number') {
              console.warn('Invalid item quantity found:', item);
              return count;
            }
            return count + (parseInt(item.quantity) || 0);
          }, 0);
        }

        // Update cart UI
        updateCartUI() {
          // Ensure items array exists
          if (!Array.isArray(this.items)) {
            this.items = [];
          }

          const cartCount = document.querySelector('[data-cart-count]');
          const cartLoading = document.querySelector('[data-cart-loading]');
          
          if (cartCount) {
            const count = this.getItemCount();
            cartCount.textContent = count.toString();
            cartCount.classList.toggle('hidden', count === 0);
          }

          if (cartLoading) {
            cartLoading.classList.toggle('hidden', !this.isLoading);
          }

          // Dispatch custom event for cart updates
          try {
            window.dispatchEvent(new CustomEvent('cartUpdated', {
              detail: {
                items: this.items,
                total: this.getTotal(),
                count: this.getItemCount(),
                isLoading: this.isLoading
              }
            }));
          } catch (error) {
            console.error('Error dispatching cart update event:', error);
          }
        }

        // Get items
        getItems() {
          return this.items;
        }

        // Sync cart when user logs in
        async syncOnLogin() {
          this.isAuthenticated = true;
          await this.initializeCart();
        }

        // Clear on logout
        onLogout() {
          this.isAuthenticated = false;
          this.items = [];
          this.syncToStorage();
          this.updateCartUI();
        }
      }

      // Initialize cart
      window.cartManager = new CartManager();

      // Utility functions
      window.showToast = function(message, type = 'info') {
        const existingToast = document.querySelector('.toast-notification');
        if (existingToast) {
          existingToast.remove();
        }

        const toast = document.createElement('div');
        const bgColor = type === 'success' ? 'bg-green-500' : 
                       type === 'error' ? 'bg-red-500' : 'bg-blue-500';
        
        toast.className = `toast-notification fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg transition-all duration-300 ${bgColor} text-white`;
        toast.textContent = message;

        document.body.appendChild(toast);

        setTimeout(() => {
          toast.style.opacity = '0';
          setTimeout(() => toast.remove(), 300);
        }, 3000);
      };

      // DOM Content Loaded
      document.addEventListener('DOMContentLoaded', function() {
        // Mobile menu toggle
        const mobileMenuButton = document.querySelector('[data-mobile-menu-button]');
        const mobileMenu = document.querySelector('[data-mobile-menu]');
        
        if (mobileMenuButton && mobileMenu) {
          mobileMenuButton.addEventListener('click', function() {
            mobileMenu.classList.toggle('hidden');
          });
        }

        // Search functionality
        const searchForm = document.querySelector('[data-search-form]');
        if (searchForm) {
          searchForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const searchInput = searchForm.querySelector('input');
            if (searchInput) {
              const query = searchInput.value.trim();
              if (query) {
                window.location.href = `/productos?search=${encodeURIComponent(query)}`;
              }
            }
          });
        }

        // User menu dropdown
        const userMenuButton = document.querySelector('[data-user-menu-button]');
        const userDropdown = document.querySelector('[data-user-dropdown]');
        
        if (userMenuButton && userDropdown) {
          userMenuButton.addEventListener('click', function(e) {
            e.stopPropagation();
            userDropdown.classList.toggle('hidden');
          });

          // Cerrar dropdown al hacer click fuera
          document.addEventListener('click', function() {
            userDropdown.classList.add('hidden');
          });

          userDropdown.addEventListener('click', function(e) {
            e.stopPropagation();
          });
        }

        // Lazy loading para imágenes
        const images = document.querySelectorAll('img[data-src]');
        if ('IntersectionObserver' in window) {
          const imageObserver = new IntersectionObserver(function(entries) {
            entries.forEach(function(entry) {
              if (entry.isIntersecting) {
                const img = entry.target;
                if (img.dataset.src) {
                  img.src = img.dataset.src;
                  img.removeAttribute('data-src');
                  imageObserver.unobserve(img);
                }
              }
            });
          });

          images.forEach(function(img) {
            imageObserver.observe(img);
          });
        }

        // Listen for auth changes
        window.addEventListener('authStateChanged', function(e) {
          if (e.detail.isAuthenticated) {
            window.cartManager.syncOnLogin();
          } else {
            window.cartManager.onLogout();
          }
        });

        // Cart event listeners
        window.addEventListener('cartUpdated', function(e) {
          console.log('Cart updated:', e.detail);
          
          // Update header cart counter
          if (typeof window.updateCartCounter === 'function') {
            window.updateCartCounter();
          }
        });

        // Global header management functions
        window.isAuthenticated = function() {
          return !!localStorage.getItem('auth_token') && !!localStorage.getItem('user_data');
        };

        window.getCurrentUser = function() {
          const userData = localStorage.getItem('user_data');
          if (userData) {
            try {
              return JSON.parse(userData);
            } catch (error) {
              console.error('Error parsing user data:', error);
              return null;
            }
          }
          return null;
        };

        window.updateHeaderAuth = function() {
          const guestButtons = document.getElementById('guest-buttons');
          const userMenu = document.getElementById('user-menu');
          const userName = document.getElementById('user-name');

          if (window.isAuthenticated()) {
            const user = window.getCurrentUser();
            
            // Hide guest buttons, show user menu
            if (guestButtons) guestButtons.style.display = 'none';
            if (userMenu) {
              userMenu.classList.remove('hidden');
              userMenu.style.display = 'flex';
            }
            
            // Set user name
            if (userName && user) {
              const displayName = user.user_metadata?.full_name || user.email?.split('@')[0] || 'Usuario';
              userName.textContent = displayName.toUpperCase();
            }
          } else {
            // Show guest buttons, hide user menu
            if (guestButtons) guestButtons.style.display = 'flex';
            if (userMenu) {
              userMenu.classList.add('hidden');
              userMenu.style.display = 'none';
            }
          }
        };

        window.updateCartCounter = function() {
          const cartCounter = document.getElementById('cart-counter');
          
          if (!window.isAuthenticated() || !cartCounter) {
            if (cartCounter) cartCounter.classList.add('hidden');
            return;
          }

          try {
            // Get cart from localStorage or cart manager
            let totalItems = 0;
            
            if (window.cartManager) {
              totalItems = window.cartManager.getItemCount();
            } else {
              const cartData = localStorage.getItem('cart_data');
              if (cartData) {
                try {
                  const cart = JSON.parse(cartData);
                  if (cart.items && Array.isArray(cart.items)) {
                    totalItems = cart.items.reduce((total, item) => {
                      return total + (item.quantity || 0);
                    }, 0);
                  }
                } catch (error) {
                  console.error('Error parsing cart data:', error);
                }
              }
            }
            
            if (totalItems > 0) {
              cartCounter.textContent = totalItems.toString();
              cartCounter.classList.remove('hidden');
            } else {
              cartCounter.classList.add('hidden');
            }
          } catch (error) {
            console.error('Error updating cart counter:', error);
            if (cartCounter) cartCounter.classList.add('hidden');
          }
        };

        // Initialize header state on page load
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', () => {
            window.updateHeaderAuth();
            window.updateCartCounter();
          });
        } else {
          window.updateHeaderAuth();
          window.updateCartCounter();
        }

        // Listen for storage changes (cross-tab sync)
        window.addEventListener('storage', (e) => {
          if (e.key === 'auth_token' || e.key === 'user_data' || e.key === 'cart_data') {
            window.updateHeaderAuth();
            window.updateCartCounter();
          }
        });
      });
    </script>
  </body>
</html>
